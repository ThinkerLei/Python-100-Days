07.分支和循环结构实战总结

***************************************************************
例子1：100以内的素数
for num in range(2, 100):
    is_prime = True
    for i in range(2, int(num ** 0.5) + 1): # ** 是求幂的运算符， range
         # 可以指定步长range(1, 100, 3) ,步长是3，上界是100，起始是1
        if num % i == 0:
            is_prime = False
            break
    if is_prime:
        print(num)
***************************************************************

===============================================================
python的缩紧规则：
 一、基本规则
代码块标识

使用缩进（空格/Tab）代替其他语言的{}
冒号:后的下一行必须缩进
缩进结束表示代码块结束
统一性要求

同一代码块内缩进量必须一致
推荐使用4个空格（PEP8标准）
禁止空格与Tab混用
二、示例
/*
def complex_logic(x):
    if x > 10:
        for i in range(x):
            while i % 2 == 0:
                print(f"嵌套层级：{i}")
                if i > 5:
                    break
    else:
        print("简单情况")

*/

/*
# 正确写法
long_string = "这是一段非常长的文本，" \ # 行延续符\
              "使用反斜杠换行"

# 错误写法（第二行未对齐）
wrong_str = "错误示范" \
"此行会产生缩进警告"
*/
===============================================================

***************************************************************
例子2：斐波那契数列
a, b = 0, 1
for _ in range(20): # _表示占位符，不需要将值赋给一个变量
    a, b = b, a + b
    print(a)
***************************************************************

===============================================================
首先，这个语句是Python中的多重赋值，也称为元组解包或并行赋值。用户可能想知道
这种赋值方式的规则、工作机制以及适用场景。我需要详细解释这种语法结构，包括其背
后的原理，比如右侧的表达式实际上是一个元组，而左侧的变量会按顺序接收对应的值。

接下来，应该考虑这种赋值方式与其他语言的区别，比如在C或Java中可能需要分开声明
每个变量，而Python允许同时为多个变量赋值。这可能涉及到Python的动态类型特性，
即变量不需要预先声明类型，类型在赋值时确定。

然后，需要讨论这种语法的常见应用场景，比如交换两个变量的值而不需要临时变量（
a, b = b, a），或者在循环中同时迭代多个值。同时，也要指出可能出现的错误，
比如左右两侧的变量和值的数量不匹配导致的错误，例如`a, b = 1, 2, 3`会引发ValueError。

此外，可能需要提到更复杂的解包情况，比如嵌套元组或列表的解包，例如
`a, (b, c) = 1, (2, 3)`，或者使用星号表达式来处理可变数量的元素，
如`a, *b, c = [1,2,3,4,5]`，其中b会捕获中间的元素作为列表。

还要注意变量声明的作用域问题，尤其是在函数内外的作用域差异，但在这个例子中可
能不涉及，因为这是最顶层的赋值。另外，Python中的变量命名规则，比如区分大小写，
不能以数字开头等，虽然用户的问题中没有直接提到，但可以作为补充内容。
一、语法本质
这种写法属于 并行赋值（Tuple Unpacking），其本质是：
(a, b) = (0, 1)  # 右侧自动组成元组
二、执行过程分解
右侧求值：先计算右侧表达式，生成元组 (0, 1)
按序分配：将元组元素依次赋值给左侧变量
原子操作：整个赋值过程是原子性的，不会出现中间状态
三、扩展应用场景
1. 多返回值处理
def get_coords():
    return 12.3, 45.6
x, y = get_coords()  # 接收函数返回的元组

2. 嵌套解包
# 二维坐标处理
points = [(1,2), (3,4)]
for (x, y) in points:
    print(f"X:{x}, Y:{y}")
# 带星号表达式
a, *b, c = [1,2,3,4,5]  # a=1, b=[2,3,4], c=5

3. 字典项解包
d = {'name': 'Alice', 'age': 25} # k, v赋值
key1, key2 = d.items()  # 获取键值对
===============================================================

***************************************************************
***************************************************************
===============================================================
===============================================================


